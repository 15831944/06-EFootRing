说明

1.该工程是基于STM103系列单片机的，其他类型的STM32单片机不能使用该工程的有关文件。
	如需使用，可以做相应的更改。

2.关于C++和C混编。只要在C代码的头文件中加入如下的头控制就可以在C++中调用C文件
	#ifdef __cplusplus
	 extern "C" {
	#endif

	//自己的代码

	#ifdef __cplusplus
	 }
	#endif

3.关于中断函数，中断函数如果定义在C++文件中，需要加入
	extern "C" {
	//自己的代码
	 }
	这样的语句控制，才能正确的调用中断

4.关于断言，断言是在编译调试时用的，在"stm32f10x_conf.h"文件中有一个这样的宏
	#define USE_FULL_ASSERT 
	这个宏就是断言的开关。
	断言函数定义在"stm32f10x_conf.c"文件中
	void assert_failed()
	该工程中断言某个变量不合法后就会进入死循环。该函数可以自己定义，如：可以用串口打印
	一些错误信息，也可以控制一些LED灯闪烁等.
	程序调试完成后，建议关闭断言（注释#define USE_FULL_ASSERT ）

5.程序的 其他中断，STM32有一些验错的中断。如：HardFault_Handler
	该中断在硬件出错或者程序中某些变量非法访问（如一些指针没初始化就使用）时触发，可以在
	该系列中断中设置一些指示灯的闪烁来判断程序出错的具体原因。

6.程序的结构，大体的思维是自下往上构建程序。尽量做到应用层和硬件无关，以及全局变量最少化。
	一些比不可少的全局变量使用指针定义，在主函数中做初始化。
	一些涉及到用户层的中断函数写到了user层。

7.全局的中断开关。
	#define CLI()     __set_PRIMASK(1) //关闭总中断
	#define SEI()     __set_PRIMASK(0) //打开总中断
	在主函数中对一些变量的初始化时最好关闭总中断，初始化完成后打开总中断，否则可能导致硬件错误（原因不明）
	关闭总中断，并非关闭所有的中断，只是关闭一些特定的中断，如定时器中断，串口中断等，一些调
	试中断以及系统时钟的中断（SysTick_Handler）并没有关闭。


